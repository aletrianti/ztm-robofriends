{"version":3,"sources":["components/Header/Header.js","components/Card/Card.js","components/CardList/CardList.js","components/Search/Search.js","components/Scroll/Scroll.js","components/ErrorBoundary/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Header","nextProps","nextState","id","Component","Card","this","props","name","email","className","src","alt","CardList","robots","card","map","robot","i","key","Search","searchChange","type","placeholder","onChange","Scroll","style","overflowY","height","children","ErrorBoundary","state","hasError","error","errorInfo","setState","console","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","connect","searchRobots","requestRobots","err","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4943711d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport './Header.scss';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return <h1 id=\"app-title\">RoboFriends</h1>;\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nimport './Card.scss';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        const { id, name, email } = this.props;\r\n        const url = 'https://robohash.org/';\r\n        const imgSize = '?200x200';\r\n\r\n        return (\r\n            <div className=\"card\">\r\n                <img src={url + id + imgSize} alt=\"\"/>\r\n                <div className=\"card_info\">\r\n                    <h2>{ name }</h2>\r\n                    <p>{ email }</p>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Card from '../Card/Card';\r\n\r\nimport './CardList.scss';\r\n\r\nclass CardList extends Component {\r\n    render() {\r\n        const { robots } = this.props;\r\n\r\n        const card = robots.map((robot, i) => {\r\n            return (<Card \r\n                        key={i}\r\n                        id={robots[i].id}\r\n                        name={robots[i].name}\r\n                        email={robots[i].email}\r\n                    />);\r\n        });\r\n        return (\r\n            <div id=\"cards-list\">\r\n                { card }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\r\n\r\nimport './Search.scss';\r\n\r\nclass Search extends Component {\r\n    render() {\r\n        const { searchChange } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <input \r\n                    id=\"search_input\"\r\n                    type=\"text\" \r\n                    placeholder=\"Search robots...\"\r\n                    onChange={searchChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;","import React, { Component } from 'react';\r\n\r\nclass Scroll extends Component {\r\n    render() {\r\n        return (\r\n            <div style={{ overflowY: 'scroll', height: '500px' }}>\r\n                { this.props.children }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({ hasError: true });\r\n        console.error('Error: ' + error + '. Error info: ' + errorInfo);\r\n    }\r\n\r\n    render() {\r\n        return this.state.hasError ? \r\n            <h1>Something went wrong.</h1> :\r\n            this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Header from '../components/Header/Header';\r\nimport CardList from '../components/CardList/CardList';\r\nimport Search from '../components/Search/Search';\r\nimport Scroll from '../components/Scroll/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary/ErrorBoundary';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport './App.scss';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        isPending: state.requestRobots.isPending,\r\n        robots: state.requestRobots.robots,\r\n        err: state.requestRobots.err\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    };\r\n};\r\n\r\nclass App extends Component {\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div id=\"app-content\">\r\n                    <Header />\r\n                    <section id=\"app-main-section\">\r\n                        <Search searchChange={onSearchChange}/>\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardList robots={filteredRobots}/>\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </section>\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\n// SEARCH\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\n// REQUEST ROBOTS\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(res => res.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n        .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }))\r\n}","// SEARCH\r\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n// REQUEST ROBOTS\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED \r\n} from './constants';\r\n\r\n// SEARCH\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            // return Object.assign({}, state, { searchField: action.payload });\r\n            return { ...state, searchField: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// REQUEST ROBOTS\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    err: ''\r\n};\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true };\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, robots: action.payload, isPending: false };\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, err: action.payload, isPending: false };\r\n        default:\r\n            return state;\r\n    }\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport './index.css';\r\n\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({\r\n  searchRobots, \r\n  requestRobots\r\n});\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}